// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/objectnode (interfaces: ExtentClientAPI)

// Package objectnode is a generated GoMock package.
package objectnode

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExtentClientAPI is a mock of ExtentClientAPI interface.
type MockExtentClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExtentClientAPIMockRecorder
}

// MockExtentClientAPIMockRecorder is the mock recorder for MockExtentClientAPI.
type MockExtentClientAPIMockRecorder struct {
	mock *MockExtentClientAPI
}

// NewMockExtentClientAPI creates a new mock instance.
func NewMockExtentClientAPI(ctrl *gomock.Controller) *MockExtentClientAPI {
	mock := &MockExtentClientAPI{ctrl: ctrl}
	mock.recorder = &MockExtentClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtentClientAPI) EXPECT() *MockExtentClientAPIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockExtentClientAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockExtentClientAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockExtentClientAPI)(nil).Close))
}

// CloseStream mocks base method.
func (m *MockExtentClientAPI) CloseStream(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseStream", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseStream indicates an expected call of CloseStream.
func (mr *MockExtentClientAPIMockRecorder) CloseStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseStream", reflect.TypeOf((*MockExtentClientAPI)(nil).CloseStream), arg0)
}

// EvictStream mocks base method.
func (m *MockExtentClientAPI) EvictStream(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictStream", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EvictStream indicates an expected call of EvictStream.
func (mr *MockExtentClientAPIMockRecorder) EvictStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictStream", reflect.TypeOf((*MockExtentClientAPI)(nil).EvictStream), arg0)
}

// Flush mocks base method.
func (m *MockExtentClientAPI) Flush(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockExtentClientAPIMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockExtentClientAPI)(nil).Flush), arg0)
}

// OpenStream mocks base method.
func (m *MockExtentClientAPI) OpenStream(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenStream", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenStream indicates an expected call of OpenStream.
func (mr *MockExtentClientAPIMockRecorder) OpenStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenStream", reflect.TypeOf((*MockExtentClientAPI)(nil).OpenStream), arg0)
}

// Read mocks base method.
func (m *MockExtentClientAPI) Read(arg0 uint64, arg1 []byte, arg2, arg3 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockExtentClientAPIMockRecorder) Read(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockExtentClientAPI)(nil).Read), arg0, arg1, arg2, arg3)
}

// UidIsLimited mocks base method.
func (m *MockExtentClientAPI) UidIsLimited(arg0 uint32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UidIsLimited", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UidIsLimited indicates an expected call of UidIsLimited.
func (mr *MockExtentClientAPIMockRecorder) UidIsLimited(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UidIsLimited", reflect.TypeOf((*MockExtentClientAPI)(nil).UidIsLimited), arg0)
}

// Write mocks base method.
func (m *MockExtentClientAPI) Write(arg0 uint64, arg1 int, arg2 []byte, arg3 int, arg4 func() error) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockExtentClientAPIMockRecorder) Write(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockExtentClientAPI)(nil).Write), arg0, arg1, arg2, arg3, arg4)
}
