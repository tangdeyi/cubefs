// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/objectnode (interfaces: VolumeMgrAPI)

// Package objectnode is a generated GoMock package.
package objectnode

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVolumeMgrAPI is a mock of VolumeMgrAPI interface.
type MockVolumeMgrAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeMgrAPIMockRecorder
}

// MockVolumeMgrAPIMockRecorder is the mock recorder for MockVolumeMgrAPI.
type MockVolumeMgrAPIMockRecorder struct {
	mock *MockVolumeMgrAPI
}

// NewMockVolumeMgrAPI creates a new mock instance.
func NewMockVolumeMgrAPI(ctrl *gomock.Controller) *MockVolumeMgrAPI {
	mock := &MockVolumeMgrAPI{ctrl: ctrl}
	mock.recorder = &MockVolumeMgrAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeMgrAPI) EXPECT() *MockVolumeMgrAPIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockVolumeMgrAPI) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockVolumeMgrAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockVolumeMgrAPI)(nil).Close))
}

// Release mocks base method.
func (m *MockVolumeMgrAPI) Release(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release", arg0)
}

// Release indicates an expected call of Release.
func (mr *MockVolumeMgrAPIMockRecorder) Release(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockVolumeMgrAPI)(nil).Release), arg0)
}

// Volume mocks base method.
func (m *MockVolumeMgrAPI) Volume(arg0 string) (*Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Volume", arg0)
	ret0, _ := ret[0].(*Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Volume indicates an expected call of Volume.
func (mr *MockVolumeMgrAPIMockRecorder) Volume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Volume", reflect.TypeOf((*MockVolumeMgrAPI)(nil).Volume), arg0)
}

// VolumeWithoutBlacklist mocks base method.
func (m *MockVolumeMgrAPI) VolumeWithoutBlacklist(arg0 string) (*Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeWithoutBlacklist", arg0)
	ret0, _ := ret[0].(*Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeWithoutBlacklist indicates an expected call of VolumeWithoutBlacklist.
func (mr *MockVolumeMgrAPIMockRecorder) VolumeWithoutBlacklist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeWithoutBlacklist", reflect.TypeOf((*MockVolumeMgrAPI)(nil).VolumeWithoutBlacklist), arg0)
}
