// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/sdk/master (interfaces: UserAPIInterface)

// Package objectnode is a generated GoMock package.
package objectnode

import (
	reflect "reflect"

	proto "github.com/cubefs/cubefs/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockUserAPIInterface is a mock of UserAPIInterface interface.
type MockUserAPIInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserAPIInterfaceMockRecorder
}

// MockUserAPIInterfaceMockRecorder is the mock recorder for MockUserAPIInterface.
type MockUserAPIInterfaceMockRecorder struct {
	mock *MockUserAPIInterface
}

// NewMockUserAPIInterface creates a new mock instance.
func NewMockUserAPIInterface(ctrl *gomock.Controller) *MockUserAPIInterface {
	mock := &MockUserAPIInterface{ctrl: ctrl}
	mock.recorder = &MockUserAPIInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAPIInterface) EXPECT() *MockUserAPIInterfaceMockRecorder {
	return m.recorder
}

// AclOperation mocks base method.
func (m *MockUserAPIInterface) AclOperation(arg0, arg1 string, arg2 uint32) (*proto.AclRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AclOperation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*proto.AclRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AclOperation indicates an expected call of AclOperation.
func (mr *MockUserAPIInterfaceMockRecorder) AclOperation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AclOperation", reflect.TypeOf((*MockUserAPIInterface)(nil).AclOperation), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockUserAPIInterface) CreateUser(arg0 *proto.UserCreateParam) (*proto.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*proto.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserAPIInterfaceMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserAPIInterface)(nil).CreateUser), arg0)
}

// DeleteUser mocks base method.
func (m *MockUserAPIInterface) DeleteUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserAPIInterfaceMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserAPIInterface)(nil).DeleteUser), arg0)
}

// DeleteVolPolicy mocks base method.
func (m *MockUserAPIInterface) DeleteVolPolicy(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolPolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolPolicy indicates an expected call of DeleteVolPolicy.
func (mr *MockUserAPIInterfaceMockRecorder) DeleteVolPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolPolicy", reflect.TypeOf((*MockUserAPIInterface)(nil).DeleteVolPolicy), arg0)
}

// GetAKInfo mocks base method.
func (m *MockUserAPIInterface) GetAKInfo(arg0 string) (*proto.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAKInfo", arg0)
	ret0, _ := ret[0].(*proto.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAKInfo indicates an expected call of GetAKInfo.
func (mr *MockUserAPIInterfaceMockRecorder) GetAKInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAKInfo", reflect.TypeOf((*MockUserAPIInterface)(nil).GetAKInfo), arg0)
}

// GetUserInfo mocks base method.
func (m *MockUserAPIInterface) GetUserInfo(arg0 string) (*proto.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0)
	ret0, _ := ret[0].(*proto.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserAPIInterfaceMockRecorder) GetUserInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserAPIInterface)(nil).GetUserInfo), arg0)
}

// ListUsers mocks base method.
func (m *MockUserAPIInterface) ListUsers(arg0 string) ([]*proto.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].([]*proto.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUserAPIInterfaceMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserAPIInterface)(nil).ListUsers), arg0)
}

// ListUsersOfVol mocks base method.
func (m *MockUserAPIInterface) ListUsersOfVol(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersOfVol", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersOfVol indicates an expected call of ListUsersOfVol.
func (mr *MockUserAPIInterfaceMockRecorder) ListUsersOfVol(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersOfVol", reflect.TypeOf((*MockUserAPIInterface)(nil).ListUsersOfVol), arg0)
}

// RemovePolicy mocks base method.
func (m *MockUserAPIInterface) RemovePolicy(arg0 *proto.UserPermRemoveParam) (*proto.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePolicy", arg0)
	ret0, _ := ret[0].(*proto.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePolicy indicates an expected call of RemovePolicy.
func (mr *MockUserAPIInterfaceMockRecorder) RemovePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicy", reflect.TypeOf((*MockUserAPIInterface)(nil).RemovePolicy), arg0)
}

// TransferVol mocks base method.
func (m *MockUserAPIInterface) TransferVol(arg0 *proto.UserTransferVolParam) (*proto.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferVol", arg0)
	ret0, _ := ret[0].(*proto.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferVol indicates an expected call of TransferVol.
func (mr *MockUserAPIInterfaceMockRecorder) TransferVol(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferVol", reflect.TypeOf((*MockUserAPIInterface)(nil).TransferVol), arg0)
}

// UidOperation mocks base method.
func (m *MockUserAPIInterface) UidOperation(arg0, arg1 string, arg2 uint32, arg3 string) (*proto.UidSpaceRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UidOperation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*proto.UidSpaceRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UidOperation indicates an expected call of UidOperation.
func (mr *MockUserAPIInterfaceMockRecorder) UidOperation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UidOperation", reflect.TypeOf((*MockUserAPIInterface)(nil).UidOperation), arg0, arg1, arg2, arg3)
}

// UpdatePolicy mocks base method.
func (m *MockUserAPIInterface) UpdatePolicy(arg0 *proto.UserPermUpdateParam) (*proto.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", arg0)
	ret0, _ := ret[0].(*proto.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockUserAPIInterfaceMockRecorder) UpdatePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockUserAPIInterface)(nil).UpdatePolicy), arg0)
}

// UpdateUser mocks base method.
func (m *MockUserAPIInterface) UpdateUser(arg0 *proto.UserUpdateParam) (*proto.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(*proto.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserAPIInterfaceMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserAPIInterface)(nil).UpdateUser), arg0)
}
