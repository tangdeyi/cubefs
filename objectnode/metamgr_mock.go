// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/objectnode (interfaces: MetaClientAPI)

// Package objectnode is a generated GoMock package.
package objectnode

import (
	reflect "reflect"

	proto "github.com/cubefs/cubefs/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockMetaClientAPI is a mock of MetaClientAPI interface.
type MockMetaClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMetaClientAPIMockRecorder
}

// MockMetaClientAPIMockRecorder is the mock recorder for MockMetaClientAPI.
type MockMetaClientAPIMockRecorder struct {
	mock *MockMetaClientAPI
}

// NewMockMetaClientAPI creates a new mock instance.
func NewMockMetaClientAPI(ctrl *gomock.Controller) *MockMetaClientAPI {
	mock := &MockMetaClientAPI{ctrl: ctrl}
	mock.recorder = &MockMetaClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaClientAPI) EXPECT() *MockMetaClientAPIMockRecorder {
	return m.recorder
}

// AddMultipartPart_ll mocks base method.
func (m *MockMetaClientAPI) AddMultipartPart_ll(arg0, arg1 string, arg2 uint16, arg3 uint64, arg4 string, arg5 *proto.InodeInfo) (uint64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMultipartPart_ll", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddMultipartPart_ll indicates an expected call of AddMultipartPart_ll.
func (mr *MockMetaClientAPIMockRecorder) AddMultipartPart_ll(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMultipartPart_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).AddMultipartPart_ll), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AppendExtentKeys mocks base method.
func (m *MockMetaClientAPI) AppendExtentKeys(arg0 uint64, arg1 []proto.ExtentKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendExtentKeys", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendExtentKeys indicates an expected call of AppendExtentKeys.
func (mr *MockMetaClientAPIMockRecorder) AppendExtentKeys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendExtentKeys", reflect.TypeOf((*MockMetaClientAPI)(nil).AppendExtentKeys), arg0, arg1)
}

// AppendObjExtentKeys mocks base method.
func (m *MockMetaClientAPI) AppendObjExtentKeys(arg0 uint64, arg1 []proto.ObjExtentKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendObjExtentKeys", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendObjExtentKeys indicates an expected call of AppendObjExtentKeys.
func (mr *MockMetaClientAPIMockRecorder) AppendObjExtentKeys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendObjExtentKeys", reflect.TypeOf((*MockMetaClientAPI)(nil).AppendObjExtentKeys), arg0, arg1)
}

// BatchGetXAttr mocks base method.
func (m *MockMetaClientAPI) BatchGetXAttr(arg0 []uint64, arg1 []string) ([]*proto.XAttrInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetXAttr", arg0, arg1)
	ret0, _ := ret[0].([]*proto.XAttrInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetXAttr indicates an expected call of BatchGetXAttr.
func (mr *MockMetaClientAPIMockRecorder) BatchGetXAttr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetXAttr", reflect.TypeOf((*MockMetaClientAPI)(nil).BatchGetXAttr), arg0, arg1)
}

// BatchInodeGet mocks base method.
func (m *MockMetaClientAPI) BatchInodeGet(arg0 []uint64) []*proto.InodeInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInodeGet", arg0)
	ret0, _ := ret[0].([]*proto.InodeInfo)
	return ret0
}

// BatchInodeGet indicates an expected call of BatchInodeGet.
func (mr *MockMetaClientAPIMockRecorder) BatchInodeGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInodeGet", reflect.TypeOf((*MockMetaClientAPI)(nil).BatchInodeGet), arg0)
}

// BatchSetXAttr_ll mocks base method.
func (m *MockMetaClientAPI) BatchSetXAttr_ll(arg0 uint64, arg1 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSetXAttr_ll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSetXAttr_ll indicates an expected call of BatchSetXAttr_ll.
func (mr *MockMetaClientAPIMockRecorder) BatchSetXAttr_ll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSetXAttr_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).BatchSetXAttr_ll), arg0, arg1)
}

// Close mocks base method.
func (m *MockMetaClientAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetaClientAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetaClientAPI)(nil).Close))
}

// Create_ll mocks base method.
func (m *MockMetaClientAPI) Create_ll(arg0 uint64, arg1 string, arg2, arg3, arg4 uint32, arg5 []byte) (*proto.InodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create_ll", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*proto.InodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create_ll indicates an expected call of Create_ll.
func (mr *MockMetaClientAPIMockRecorder) Create_ll(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).Create_ll), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteWithCond_ll mocks base method.
func (m *MockMetaClientAPI) DeleteWithCond_ll(arg0, arg1 uint64, arg2 string, arg3 bool) (*proto.InodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWithCond_ll", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*proto.InodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWithCond_ll indicates an expected call of DeleteWithCond_ll.
func (mr *MockMetaClientAPIMockRecorder) DeleteWithCond_ll(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithCond_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).DeleteWithCond_ll), arg0, arg1, arg2, arg3)
}

// Delete_ll mocks base method.
func (m *MockMetaClientAPI) Delete_ll(arg0 uint64, arg1 string, arg2 bool) (*proto.InodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete_ll", arg0, arg1, arg2)
	ret0, _ := ret[0].(*proto.InodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete_ll indicates an expected call of Delete_ll.
func (mr *MockMetaClientAPIMockRecorder) Delete_ll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).Delete_ll), arg0, arg1, arg2)
}

// DentryCreate_ll mocks base method.
func (m *MockMetaClientAPI) DentryCreate_ll(arg0 uint64, arg1 string, arg2 uint64, arg3 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DentryCreate_ll", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DentryCreate_ll indicates an expected call of DentryCreate_ll.
func (mr *MockMetaClientAPIMockRecorder) DentryCreate_ll(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DentryCreate_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).DentryCreate_ll), arg0, arg1, arg2, arg3)
}

// DentryUpdate_ll mocks base method.
func (m *MockMetaClientAPI) DentryUpdate_ll(arg0 uint64, arg1 string, arg2 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DentryUpdate_ll", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DentryUpdate_ll indicates an expected call of DentryUpdate_ll.
func (mr *MockMetaClientAPIMockRecorder) DentryUpdate_ll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DentryUpdate_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).DentryUpdate_ll), arg0, arg1, arg2)
}

// Evict mocks base method.
func (m *MockMetaClientAPI) Evict(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evict", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Evict indicates an expected call of Evict.
func (mr *MockMetaClientAPIMockRecorder) Evict(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evict", reflect.TypeOf((*MockMetaClientAPI)(nil).Evict), arg0)
}

// GetExtents mocks base method.
func (m *MockMetaClientAPI) GetExtents(arg0 uint64) (uint64, uint64, []proto.ExtentKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtents", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].([]proto.ExtentKey)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetExtents indicates an expected call of GetExtents.
func (mr *MockMetaClientAPIMockRecorder) GetExtents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtents", reflect.TypeOf((*MockMetaClientAPI)(nil).GetExtents), arg0)
}

// GetMultipart_ll mocks base method.
func (m *MockMetaClientAPI) GetMultipart_ll(arg0, arg1 string) (*proto.MultipartInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipart_ll", arg0, arg1)
	ret0, _ := ret[0].(*proto.MultipartInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultipart_ll indicates an expected call of GetMultipart_ll.
func (mr *MockMetaClientAPIMockRecorder) GetMultipart_ll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipart_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).GetMultipart_ll), arg0, arg1)
}

// GetObjExtents mocks base method.
func (m *MockMetaClientAPI) GetObjExtents(arg0 uint64) (uint64, uint64, []proto.ExtentKey, []proto.ObjExtentKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjExtents", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].([]proto.ExtentKey)
	ret3, _ := ret[3].([]proto.ObjExtentKey)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetObjExtents indicates an expected call of GetObjExtents.
func (mr *MockMetaClientAPIMockRecorder) GetObjExtents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjExtents", reflect.TypeOf((*MockMetaClientAPI)(nil).GetObjExtents), arg0)
}

// InitMultipart_ll mocks base method.
func (m *MockMetaClientAPI) InitMultipart_ll(arg0 string, arg1 map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitMultipart_ll", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitMultipart_ll indicates an expected call of InitMultipart_ll.
func (mr *MockMetaClientAPIMockRecorder) InitMultipart_ll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMultipart_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).InitMultipart_ll), arg0, arg1)
}

// InodeCreate_ll mocks base method.
func (m *MockMetaClientAPI) InodeCreate_ll(arg0 uint64, arg1, arg2, arg3 uint32, arg4 []byte, arg5 []uint64) (*proto.InodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InodeCreate_ll", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*proto.InodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InodeCreate_ll indicates an expected call of InodeCreate_ll.
func (mr *MockMetaClientAPIMockRecorder) InodeCreate_ll(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InodeCreate_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).InodeCreate_ll), arg0, arg1, arg2, arg3, arg4, arg5)
}

// InodeDelete_ll mocks base method.
func (m *MockMetaClientAPI) InodeDelete_ll(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InodeDelete_ll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InodeDelete_ll indicates an expected call of InodeDelete_ll.
func (mr *MockMetaClientAPIMockRecorder) InodeDelete_ll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InodeDelete_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).InodeDelete_ll), arg0)
}

// InodeGet_ll mocks base method.
func (m *MockMetaClientAPI) InodeGet_ll(arg0 uint64) (*proto.InodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InodeGet_ll", arg0)
	ret0, _ := ret[0].(*proto.InodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InodeGet_ll indicates an expected call of InodeGet_ll.
func (mr *MockMetaClientAPIMockRecorder) InodeGet_ll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InodeGet_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).InodeGet_ll), arg0)
}

// InodeLink_ll mocks base method.
func (m *MockMetaClientAPI) InodeLink_ll(arg0 uint64) (*proto.InodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InodeLink_ll", arg0)
	ret0, _ := ret[0].(*proto.InodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InodeLink_ll indicates an expected call of InodeLink_ll.
func (mr *MockMetaClientAPIMockRecorder) InodeLink_ll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InodeLink_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).InodeLink_ll), arg0)
}

// InodeUnlink_ll mocks base method.
func (m *MockMetaClientAPI) InodeUnlink_ll(arg0 uint64) (*proto.InodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InodeUnlink_ll", arg0)
	ret0, _ := ret[0].(*proto.InodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InodeUnlink_ll indicates an expected call of InodeUnlink_ll.
func (mr *MockMetaClientAPIMockRecorder) InodeUnlink_ll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InodeUnlink_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).InodeUnlink_ll), arg0)
}

// IsEnableQuota mocks base method.
func (m *MockMetaClientAPI) IsEnableQuota() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnableQuota")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnableQuota indicates an expected call of IsEnableQuota.
func (mr *MockMetaClientAPIMockRecorder) IsEnableQuota() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnableQuota", reflect.TypeOf((*MockMetaClientAPI)(nil).IsEnableQuota))
}

// IsQuotaLimitedById mocks base method.
func (m *MockMetaClientAPI) IsQuotaLimitedById(arg0 uint64, arg1, arg2 bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsQuotaLimitedById", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsQuotaLimitedById indicates an expected call of IsQuotaLimitedById.
func (mr *MockMetaClientAPIMockRecorder) IsQuotaLimitedById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsQuotaLimitedById", reflect.TypeOf((*MockMetaClientAPI)(nil).IsQuotaLimitedById), arg0, arg1, arg2)
}

// ListMultipart_ll mocks base method.
func (m *MockMetaClientAPI) ListMultipart_ll(arg0, arg1, arg2, arg3 string, arg4 uint64) ([]*proto.MultipartInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMultipart_ll", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*proto.MultipartInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultipart_ll indicates an expected call of ListMultipart_ll.
func (mr *MockMetaClientAPIMockRecorder) ListMultipart_ll(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultipart_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).ListMultipart_ll), arg0, arg1, arg2, arg3, arg4)
}

// Lookup_ll mocks base method.
func (m *MockMetaClientAPI) Lookup_ll(arg0 uint64, arg1 string) (uint64, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup_ll", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Lookup_ll indicates an expected call of Lookup_ll.
func (mr *MockMetaClientAPIMockRecorder) Lookup_ll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).Lookup_ll), arg0, arg1)
}

// OSSSecure mocks base method.
func (m *MockMetaClientAPI) OSSSecure() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSSSecure")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// OSSSecure indicates an expected call of OSSSecure.
func (mr *MockMetaClientAPIMockRecorder) OSSSecure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSSSecure", reflect.TypeOf((*MockMetaClientAPI)(nil).OSSSecure))
}

// Owner mocks base method.
func (m *MockMetaClientAPI) Owner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Owner")
	ret0, _ := ret[0].(string)
	return ret0
}

// Owner indicates an expected call of Owner.
func (mr *MockMetaClientAPIMockRecorder) Owner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owner", reflect.TypeOf((*MockMetaClientAPI)(nil).Owner))
}

// ReadDirLimit_ll mocks base method.
func (m *MockMetaClientAPI) ReadDirLimit_ll(arg0 uint64, arg1 string, arg2 uint64) ([]proto.Dentry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDirLimit_ll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]proto.Dentry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDirLimit_ll indicates an expected call of ReadDirLimit_ll.
func (mr *MockMetaClientAPIMockRecorder) ReadDirLimit_ll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDirLimit_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).ReadDirLimit_ll), arg0, arg1, arg2)
}

// ReadDir_ll mocks base method.
func (m *MockMetaClientAPI) ReadDir_ll(arg0 uint64) ([]proto.Dentry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir_ll", arg0)
	ret0, _ := ret[0].([]proto.Dentry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir_ll indicates an expected call of ReadDir_ll.
func (mr *MockMetaClientAPIMockRecorder) ReadDir_ll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).ReadDir_ll), arg0)
}

// RemoveMultipart_ll mocks base method.
func (m *MockMetaClientAPI) RemoveMultipart_ll(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipart_ll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipart_ll indicates an expected call of RemoveMultipart_ll.
func (mr *MockMetaClientAPIMockRecorder) RemoveMultipart_ll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipart_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).RemoveMultipart_ll), arg0, arg1)
}

// XAttrDel_ll mocks base method.
func (m *MockMetaClientAPI) XAttrDel_ll(arg0 uint64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAttrDel_ll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// XAttrDel_ll indicates an expected call of XAttrDel_ll.
func (mr *MockMetaClientAPIMockRecorder) XAttrDel_ll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAttrDel_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).XAttrDel_ll), arg0, arg1)
}

// XAttrGetAll_ll mocks base method.
func (m *MockMetaClientAPI) XAttrGetAll_ll(arg0 uint64) (*proto.XAttrInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAttrGetAll_ll", arg0)
	ret0, _ := ret[0].(*proto.XAttrInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XAttrGetAll_ll indicates an expected call of XAttrGetAll_ll.
func (mr *MockMetaClientAPIMockRecorder) XAttrGetAll_ll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAttrGetAll_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).XAttrGetAll_ll), arg0)
}

// XAttrGet_ll mocks base method.
func (m *MockMetaClientAPI) XAttrGet_ll(arg0 uint64, arg1 string) (*proto.XAttrInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAttrGet_ll", arg0, arg1)
	ret0, _ := ret[0].(*proto.XAttrInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XAttrGet_ll indicates an expected call of XAttrGet_ll.
func (mr *MockMetaClientAPIMockRecorder) XAttrGet_ll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAttrGet_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).XAttrGet_ll), arg0, arg1)
}

// XAttrSet_ll mocks base method.
func (m *MockMetaClientAPI) XAttrSet_ll(arg0 uint64, arg1, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAttrSet_ll", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// XAttrSet_ll indicates an expected call of XAttrSet_ll.
func (mr *MockMetaClientAPIMockRecorder) XAttrSet_ll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAttrSet_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).XAttrSet_ll), arg0, arg1, arg2)
}

// XAttrsList_ll mocks base method.
func (m *MockMetaClientAPI) XAttrsList_ll(arg0 uint64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAttrsList_ll", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XAttrsList_ll indicates an expected call of XAttrsList_ll.
func (mr *MockMetaClientAPIMockRecorder) XAttrsList_ll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAttrsList_ll", reflect.TypeOf((*MockMetaClientAPI)(nil).XAttrsList_ll), arg0)
}
